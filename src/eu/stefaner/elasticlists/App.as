package eu.stefaner.elasticlists {	import eu.stefaner.elasticlists.data.ContentItem;	import eu.stefaner.elasticlists.data.DataConnector;	import eu.stefaner.elasticlists.data.Facet;	import eu.stefaner.elasticlists.data.Model;	import eu.stefaner.elasticlists.ui.DefaultGraphicsFactory;	import eu.stefaner.elasticlists.ui.appcomponents.ContentArea;	import eu.stefaner.elasticlists.ui.appcomponents.DetailView;	import eu.stefaner.elasticlists.ui.contentitem.ContentItemSprite;	import eu.stefaner.elasticlists.ui.facetboxes.FacetBox;	import eu.stefaner.elasticlists.ui.facetboxes.FacetBoxContainer;	import eu.stefaner.elasticlists.ui.facetboxes.elasticlist.ElasticListBox;	import com.bit101.components.HBox;	import com.bit101.components.VBox;	import org.osflash.thunderbolt.Logger;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.text.TextField;	/**	 * App	 *	 * Main application class, associated with flash stage.	 * Creates Model, DataConnector, DetailView etc., and  manages main application states	 *	 * For new applications, subclass and override as needed	 * 	 * @langversion ActionScript 3.0	 * @playerversion Flash 10	 * @version 1.0	 *	 * @author moritz@stefaner.eu	 */	public class App extends Sprite {		/**		 * Manages data and facet information 		 */		public var model : Model;		/**		 * provides connectivity to external data 		 */		public var dataConnector : DataConnector;		/**		 * displays the result set		 */		public var contentArea : ContentArea;		/** display details for selected contentitem		 * 		 */		public var detailView : DetailView;		// events		/** 		 * dispatched when all facets are loaded and inited		 * TODO: revisit - really needed?		 */		// 		public static var FACETS_CHANGED : String = "FACETS_CHANGED";		/**		 * disptached when (visible or all) contentitems have changed		 */		public static var CONTENTITEMS_CHANGED : String = "CONTENTITEMS_CHANGED";		/**		 * disptached when facet values (or their stats) are changed 		 */		public static var FILTERS_CHANGED : String = "FILTERS_CHANGED";		/**		 * constructor, calls @see startup		 */		public function App() {			this.startUp();		}		/** 		 * initialize @see model and @see dataConnector, starts loading data		 */		protected function startUp() : void {			initStage();			model = createModel();			dataConnector = createDataConnector();			dataConnector.addEventListener(DataConnector.DATA_LOADED, onDataLoaded);			loadData();		}		/**		 * set scale mode, alignment and add resize listener		 */		protected function initStage() : void {			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			stage.addEventListener(Event.RESIZE, onResize);		}		/**		 * Resize event handler		 */		protected function onResize(e : Event) : void {			layout();		}		/**		 * start loading data, calls @see eu.stefaner.elasticlists.data.DataConnector.loadData		 */		protected function loadData() : void {			dataConnector.loadData();		}		/**		 * start loading data, calls @see eu.stefaner.elasticlists.data.DataConnector.loadData		 */		protected function onDataLoaded(e : Event) : void {			Logger.info("App.onDataLoaded");			initDisplay();			model.updateGlobalFacetStats();						dispatchEvent(new Event(FACETS_CHANGED));			dispatchEvent(new Event(CONTENTITEMS_CHANGED));			applyFilters();		}		protected function initDisplay() : void {			// create facet boxes etc			layout();		}		protected function layout() : void {			// position components
		}
		/*		 * creates and returns the dataConnector		 */		protected function createDataConnector() : DataConnector {			return new DataConnector(model);		}		/*		 * creates and returns the model		 */		protected function createModel() : Model {			return new Model(this);		}		public function createContentItem(id : String) : ContentItem {			return new ContentItem(id);		}		/*		 * called by ContentArea to get a sprite for a contentItem		 */		// 		public function createContentItemSprite(contentItem : ContentItem) : ContentItemSprite {			return new ContentItemSprite(contentItem);		}		/*		 * called by FacetBoxContainer.onSelectionChange		 * TODO: use events?		 */		public function applyFilters() : void {						model.applyFilters();						for each (var facet:Facet in model.facets) {				facet.calcLocalStats();			}						dispatchEvent(new Event(FILTERS_CHANGED));						if (contentArea.selectedContentItem && contentArea.selectedContentItem.filteredOut) {				contentArea.selectedContentItem.selected = false;			}						showDetails(contentArea.selectedContentItem);		}		/** 		 * show details for selected ContentItem		 * called by ContentArea when item is clicked		 */		public function showDetails(selection : ContentItem = null) : void {			if (detailView) {				detailView.display(selection);			}		}	}}