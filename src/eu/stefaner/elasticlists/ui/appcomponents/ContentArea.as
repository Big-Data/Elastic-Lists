package eu.stefaner.elasticlists.ui.appcomponents {	import flash.text.TextFieldAutoSize;
	import flare.vis.operator.layout.Layout;
	import eu.stefaner.elasticlists.App;	import eu.stefaner.elasticlists.data.ContentItem;	import eu.stefaner.elasticlists.data.DataItem;	import eu.stefaner.elasticlists.layout.TileLayout;	import eu.stefaner.elasticlists.ui.DefaultGraphicsFactory;	import eu.stefaner.elasticlists.ui.contentitem.ContentItemSprite;	import flare.animate.Transitioner;	import flare.vis.Visualization;	import flare.vis.data.Data;	import org.osflash.thunderbolt.Logger;	import flash.display.Sprite;	import flash.events.Event;	import flash.text.TextField;	public class ContentArea extends Sprite {		public var app : App;		public var visualization : Visualization;		public var bg : Sprite;		public var title_tf : TextField;		public var selectedContentItem : ContentItem = null;		protected var transitioner : Transitioner;		protected var firstRun : Boolean = true;		public var maxItems : uint = 30;		public var TRANSITION_DURATION : Number = 1;		public var sortField : String;		public function ContentArea() {			super();			initGraphics();		}		public function init(a : App) : void {			this.app = a;			app.addEventListener(App.CONTENTITEMS_CHANGED, onContentItemsChanged, false, 0, true);			app.addEventListener(App.FILTERS_CHANGED, onFilteredContentItemsChanged, false, 0, true);						initVisualization();					layout();		}		protected function layout() : void {			title_tf.x = 3;			title_tf.y = 2;			visualization.x = 5;			visualization.y = 24;			visualization.bounds.height = height - visualization.y - 2;			visualization.bounds.width = width - 10;			updateVisualization(false);		}
		protected function initGraphics() : void {			if(!bg) {				bg = DefaultGraphicsFactory.getPanelBackground();				addChildAt(bg, 0);			}			if(!title_tf) {				title_tf = DefaultGraphicsFactory.getTitleTextField();				addChild(title_tf);			}		}		//  -----------------------------------------			//---------------------------------------		// GETTER / SETTERS		//---------------------------------------		override public function set height( h : Number ) : void { 			bg.height = h;			layout();		}		override public function get height() : Number { 			return bg.height; 		}		override public function set width( h : Number ) : void { 			bg.width = h;			layout();		}		override public function get width() : Number { 			return bg.width; 		}		//---------------------------------------		// PUBLIC METHODS		//---------------------------------------		public function createContentItems() : void {			Logger.info("ContentArea.createContentItems");			var d : Data = new Data();						var sprite : ContentItemSprite;						// REVISIT: This will just ADD sprites all the time, 			// check for reuse of exisiting sprites and deleted items etc!			for each(var contentItem:ContentItem in app.model.allContentItems) {				sprite = app.createContentItemSprite(contentItem);				d.addNode(sprite);				contentItem.addEventListener(DataItem.SELECTION_STATUS_CHANGE, onContentItemSelection, false, 0, true);			}			if(sortField) {				d.nodes.sortBy(sortField);			}			visualization.data = d;			}		public function onContentItemSelection(e : Event) : void {			Logger.info("ContentArea.onContentItemSelection " + e.target);			var c : ContentItem = ContentItem(e.target);			if(selectedContentItem != null && c.selected) {				// click on currently selected item				// will directly trigger this function again via the listener!				selectedContentItem.selected = false;			}			if(!c.selected) {				selectedContentItem = null;			} else {				selectedContentItem = c;			}						app.showDetails(selectedContentItem);			updateVisualization(false);					};		private function onContentItemsChanged(event : Event) : void {			createContentItems();			updateVisualization(false);		}		public function onFilteredContentItemsChanged(e : Event) : void {				if(!visualization.data) {				createContentItems();			}			updateVisualization();			updateTitle();		};		private function updateTitle() : void {			title_tf.text = app.model.filteredContentItems.length + " resources found";
		}
		//---------------------------------------		// PROTECTED METHODS		//---------------------------------------		protected function initVisualization() : void {			visualization = new Visualization();			addChild(visualization);						visualization.operators.add(new TileLayout(5, TileLayout.SCALE_TO_FIXED_SIZE));		}		protected function refreshTransitioner(fluidTransition : Boolean = true) : void {			if(transitioner && transitioner.running) {				transitioner.stop();			}			transitioner = createTransitioner();			transitioner.immediate = firstRun || !fluidTransition;			firstRun = false;		}		protected function createTransitioner() : Transitioner {
			return new Transitioner(TRANSITION_DURATION, null, true);
		}
		public function updateVisualization(fluidTransition : Boolean = true) : void {			Logger.info("ContentArea.updateVisualization");						if(visualization.data == undefined) return;						refreshTransitioner(fluidTransition);						try {				if(sortField) {					visualization.data.nodes.sortBy(sortField);				}					} catch(error : Error) {			}						visualization.update(transitioner).play();		};	}}