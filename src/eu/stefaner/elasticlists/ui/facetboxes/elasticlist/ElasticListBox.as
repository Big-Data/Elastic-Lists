package eu.stefaner.elasticlists.ui.facetboxes.elasticlist {	import flare.animate.TransitionEvent;
	import flare.animate.Transitioner;
	import eu.stefaner.elasticlists.ui.facetboxes.FacetBox;	import eu.stefaner.elasticlists.ui.facetboxes.FacetBoxElement;	import com.bit101.components.VScrollBar;	import org.osflash.thunderbolt.Logger;	import flash.events.Event;	import flash.geom.Rectangle;	public class ElasticListBox extends FacetBox {		//---------------------------------------		// PUBLIC VARIABLES		//---------------------------------------		public var scrollBar : VScrollBar;
		//---------------------------------------		// INSTANCE VARIABLES		//---------------------------------------						//---------------------------------------		// CONSTRUCTOR		//---------------------------------------		public function ElasticListBox() {			super();		}		override protected function initGraphics() : void {			super.initGraphics();						scrollBar = new VScrollBar(this, 0, 0, onScrollBarMoved);			addChild(scrollBar);		}		public function onScrollBarMoved(e : Event) : void {			contentsSprite.y = -scrollBar.value;
		}
		//---------------------------------------		// GETTER / SETTERS		//---------------------------------------		override protected function layout() : void {			super.layout();						scrollBar.x = width - scrollBar.width;			scrollBar.height = height;						for each (var sprite:FacetBoxElement in facetBoxElements) {				sprite.width = width;			}		}		override protected function getNewFacetBoxElement() : FacetBoxElement {			return new ElasticListEntry();		};		override protected function createTransitioner() : Transitioner {
			var t : Transitioner = super.createTransitioner();			t.addEventListener(TransitionEvent.STEP, onTransitionStep, false, 0, true);			return t;
		}
		override protected function onTransitionStep(event : Event) : void {			updateScrollBar();		}		private function updateScrollBar() : void {						var b : Rectangle = contentsSprite.getBounds(this);			if(b.height > height) {				scrollBar.setSliderParams(0, b.height - height, -contentsSprite.y);				scrollBar.visible = true;				scrollBar.setThumbPercent(height / b.height);			} else {				scrollBar.visible = false;			}
		}
	}}