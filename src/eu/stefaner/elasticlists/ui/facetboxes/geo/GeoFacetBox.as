package eu.stefaner.elasticlists.ui.facetboxes.geo {	import eu.stefaner.elasticlists.data.FacetValue;	import eu.stefaner.elasticlists.data.GeoFacetValue;	import eu.stefaner.elasticlists.ui.facetboxes.FacetBox;	import eu.stefaner.elasticlists.ui.facetboxes.FacetBoxElement;	import flare.util.Stats;	import flare.util.Vectors;	import gs.TweenFilterLite;	import com.modestmaps.TweenMap;	import com.modestmaps.core.MapExtent;	import com.modestmaps.events.MapEvent;	import com.modestmaps.extras.ZoomSlider;	import com.modestmaps.mapproviders.OpenStreetMapProvider;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	public class GeoFacetBox extends FacetBox {		public var visibleRect : MapExtent;		private var map : TweenMap;		public function GeoFacetBox() {			super();		}		//---------------------------------------		// GETTER / SETTERS		//---------------------------------------		override public function set height( h : Number ) : void { 			bg.height = h;			if(map) {				map.setSize(bg.width, bg.height);			}		}			override public function set width( w : Number ) : void { 			bg.width = w;			if(map) {				map.setSize(bg.width, bg.height);			}		}		override protected function initGraphics() : void {
			super.initGraphics();			initMap();
		}
		override public function onFacetBoxElementClick(target : FacetBoxElement) : void {			/*			var r=(facet as GeoFacet).visibleRect;			map.setExtent(new MapExtent(r.top, r.bottom, r.right, r.left));			 */			for each (var f:GeoFacetValue in data) {				f.selected = false;			}			if(!target.selected) {				target.selected = true;				map.setCenter((target as MapMarker).location);				map.setZoom(10);				updateFiltersFromVisibleArea(); 			} else {				doPositioning();			}		}		override protected function createFacetBoxElement(facetValue : FacetValue) : FacetBoxElement {			var sprite : MapMarker;						sprite = MapMarker(getNewFacetBoxElement());			sprite.init(this, facetValue);			map.putMarker(sprite.location, sprite);						facetBoxElements.push(sprite);			facetBoxElementForDataObject[facetValue] = sprite;						return sprite;		}		override protected function getNewFacetBoxElement() : FacetBoxElement {			return new MapMarker();		}		//---------------------------------------		// OTHER STUFF		//---------------------------------------		protected function initMap() : void {				/*			map = new Map(bg.width, bg.height, true, new OpenStreetMapProvider());			addChild(map);			map.addChild(new MapControls(map));			 */			map = new TweenMap(bg.width, bg.height, true, new OpenStreetMapProvider());					//map.addChild(new MapCopyright(map, 143, 10));			//map.addChild(new ZoomBox(map));			map.addChild(new ZoomSlider(map));			//map.addChild(new NavigatorWindow(map));			//map.addChild(new MapControls(map));			//map.addChild(new MapScale(map, 140));			map.addEventListener(MouseEvent.DOUBLE_CLICK, map.onDoubleClick);			map.addEventListener(MouseEvent.MOUSE_WHEEL, map.onMouseWheel); 			map.grid.alpha = 0.33;			//TweenFilterLite.from(map.grid, .01, {colorMatrixFilter:{colorize:0x0099ff, brightness:.5, amount:1, saturation:0}});						// listen for map events			map.addEventListener(MapEvent.STOP_ZOOMING, onMapChange);			map.addEventListener(MapEvent.STOP_PANNING, onMapChange);          				addChild(map);		};		private function onMapChange(e : MapEvent) : void {			updateFiltersFromVisibleArea();		};		private function updateFiltersFromVisibleArea() : void {			this.visibleRect = map.getExtent();			/*			 			 // need to improve this			for each (var f:GeoFacetValue in data) {				f.selected = f.isInRegion(this.visibleRect);			}						dispatchEvent(new Event(FacetBox.on_selectionChange));			 * 			 */		};		override protected function doPositioning() : void {						var r : Rectangle = getVisibleRect();			map.setExtent(new MapExtent(r.top, r.bottom, r.right, r.left));			 			trace("MAP ZOOM " + map.getZoom());			if (map.getZoom() < 1) {				map.setZoom(1);			}			if (map.getZoom() > 10) {				map.setZoom(10);			}			var z : int = map.getZoom(); 			for each (var sprite:MapMarker in facetBoxElements) {				sprite.scaleX = sprite.scaleY = 1 + Math.sqrt(z) * .5;			}		};		private function getVisibleRect() : Rectangle {								// collect number of content items per not filtered out facet value						var lats : Array = [];			var longs : Array = [];			for each(var f:GeoFacetValue in data) {				if(f.numContentItems) {					lats.push(f.lat);					longs.push(f.long);				}			}			var visibleRect : Rectangle = new Rectangle();			// re-calc stats						// NEEDS update -> Vectors!			var latStats : Stats = new Stats(Vectors.copyFromArray(lats));			var longStats : Stats = new Stats(Vectors.copyFromArray(longs));						visibleRect.left = longStats.minimum;			visibleRect.right = longStats.maximum;						visibleRect.top = latStats.minimum;						visibleRect.bottom = latStats.maximum;				 			return visibleRect;		}						//	GETTERS/SETTERS:				//	PRIVATE METHODS:	}}